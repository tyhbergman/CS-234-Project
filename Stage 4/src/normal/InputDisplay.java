package normal;


import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author nickanderson
 */
public class InputDisplay extends javax.swing.JFrame {

    private Input input;
    private static final InputList inputList = new InputList();
    private static final String filename = "inputsdummy.csv";
    private static final String delimiter = ",";
    /**
     * Creates new form InputDisplay
     */
    public InputDisplay() {
        initComponents();
        readCSVInput();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlInput = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        lblLineItemID = new javax.swing.JLabel();
        lblVendorName = new javax.swing.JLabel();
        lblVendorCategory = new javax.swing.JLabel();
        lblInputName = new javax.swing.JLabel();
        lblUnitCost = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        lblDiscount = new javax.swing.JLabel();
        lblTaxRate = new javax.swing.JLabel();
        txtLineItemID = new javax.swing.JTextField();
        txtVendorName = new javax.swing.JTextField();
        txtVendorCategory = new javax.swing.JTextField();
        txtInputName = new javax.swing.JTextField();
        txtUnitCost = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtDiscount = new javax.swing.JTextField();
        txtTaxRate = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        scrlpneInputReport = new javax.swing.JScrollPane();
        tblInputReport = new javax.swing.JTable();
        lblTotalGrossCost = new javax.swing.JLabel();
        lblTotalDiscountAmount = new javax.swing.JLabel();
        lblTotalTaxAmount = new javax.swing.JLabel();
        lblTotalNetCost = new javax.swing.JLabel();
        txtTotalGrossCost = new javax.swing.JTextField();
        txtTotalDiscountAmount = new javax.swing.JTextField();
        txtTotalTaxAmount = new javax.swing.JTextField();
        txtTotalNetCost = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuInputReport = new javax.swing.JMenu();
        menuItemAdd = new javax.swing.JMenuItem();
        menuItemUpdate = new javax.swing.JMenuItem();
        menuItemDelete = new javax.swing.JMenuItem();
        menuItemImport = new javax.swing.JMenuItem();
        menuItemExport = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemReturntoMM = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlInput.setBackground(new java.awt.Color(204, 255, 204));
        pnlInput.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 51), new java.awt.Color(204, 255, 204)));

        lblHeader.setFont(new java.awt.Font("Mshtakan", 1, 24)); // NOI18N
        lblHeader.setForeground(new java.awt.Color(0, 0, 255));
        lblHeader.setText("Input Management");

        lblLineItemID.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblLineItemID.setText("ID");

        lblVendorName.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblVendorName.setText("Vendor Name");

        lblVendorCategory.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblVendorCategory.setText("Vendor Category");

        lblInputName.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblInputName.setText("Input Name");

        lblUnitCost.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblUnitCost.setText("Unit Cost            $");

        lblQuantity.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblQuantity.setText("Quantity");

        lblDiscount.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblDiscount.setText("Discount             %");

        lblTaxRate.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblTaxRate.setText("Tax Rate            %");

        txtLineItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLineItemIDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLineItemIDKeyReleased(evt);
            }
        });

        txtVendorName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVendorNameKeyPressed(evt);
            }
        });

        txtVendorCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVendorCategoryKeyPressed(evt);
            }
        });

        txtInputName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInputNameKeyPressed(evt);
            }
        });

        txtUnitCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUnitCostKeyPressed(evt);
            }
        });

        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });

        txtTaxRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTaxRateKeyPressed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnUpdateStateChanged(evt);
            }
        });
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        tblInputReport.setFont(new java.awt.Font("Mshtakan", 0, 10)); // NOI18N
        tblInputReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Vendor", "Cat.", "Input", "U.C. ($)", "Quan.", "Disc. (%)", "Tax (%)", "G.C. ($)", "D.A. ($)", "T.A. ($)", "N.C. ($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInputReport.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblInputReport.getTableHeader().setReorderingAllowed(false);
        tblInputReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInputReportMouseClicked(evt);
            }
        });
        scrlpneInputReport.setViewportView(tblInputReport);
        if (tblInputReport.getColumnModel().getColumnCount() > 0) {
            tblInputReport.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblInputReport.getColumnModel().getColumn(1).setPreferredWidth(70);
            tblInputReport.getColumnModel().getColumn(2).setPreferredWidth(70);
            tblInputReport.getColumnModel().getColumn(3).setPreferredWidth(70);
            tblInputReport.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblInputReport.getColumnModel().getColumn(5).setPreferredWidth(40);
            tblInputReport.getColumnModel().getColumn(6).setPreferredWidth(40);
            tblInputReport.getColumnModel().getColumn(7).setPreferredWidth(40);
            tblInputReport.getColumnModel().getColumn(8).setPreferredWidth(50);
            tblInputReport.getColumnModel().getColumn(9).setPreferredWidth(50);
            tblInputReport.getColumnModel().getColumn(10).setPreferredWidth(50);
            tblInputReport.getColumnModel().getColumn(11).setPreferredWidth(50);
        }

        lblTotalGrossCost.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblTotalGrossCost.setText("Total Gross Cost        $");

        lblTotalDiscountAmount.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblTotalDiscountAmount.setText("Total Discount Amount   $");

        lblTotalTaxAmount.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblTotalTaxAmount.setText("Total Tax Amount       $");

        lblTotalNetCost.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblTotalNetCost.setText("Total Net Cost           $");

        txtTotalGrossCost.setEditable(false);

        txtTotalDiscountAmount.setEditable(false);

        txtTotalTaxAmount.setEditable(false);

        txtTotalNetCost.setEditable(false);

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Mshtakan", 1, 14)); // NOI18N
        lblSearch.setText("Search");

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInputName)
                            .addComponent(lblVendorCategory)
                            .addComponent(lblVendorName)
                            .addComponent(lblLineItemID)
                            .addComponent(lblTaxRate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTaxRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUnitCost)
                            .addComponent(txtLineItemID)
                            .addComponent(txtVendorName)
                            .addComponent(txtVendorCategory)
                            .addComponent(txtInputName)))
                    .addComponent(lblDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnitCost, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset)))
                    .addComponent(lblHeader)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlpneInputReport, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addGap(26, 26, 26)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(lblTotalDiscountAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotalDiscountAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(lblTotalGrossCost, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalGrossCost, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(lblTotalTaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalTaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(lblTotalNetCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalNetCost, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(88, 88, 88))))
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addComponent(lblHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLineItemID)
                            .addComponent(txtLineItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVendorName)
                            .addComponent(txtVendorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVendorCategory)
                            .addComponent(txtVendorCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInputName)
                            .addComponent(txtInputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUnitCost)
                            .addComponent(txtUnitCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantity)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDiscount)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTaxRate)
                            .addComponent(txtTaxRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrlpneInputReport, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(lblTotalGrossCost)
                    .addComponent(txtTotalGrossCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalDiscountAmount)
                    .addComponent(txtTotalDiscountAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalTaxAmount)
                            .addComponent(txtTotalTaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalNetCost)
                            .addComponent(txtTotalNetCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearch))
                        .addGap(70, 70, 70))))
        );

        menuInputReport.setText("File");

        menuItemAdd.setText("Add");
        menuInputReport.add(menuItemAdd);

        menuItemUpdate.setText("Update");
        menuInputReport.add(menuItemUpdate);

        menuItemDelete.setText("Delete");
        menuInputReport.add(menuItemDelete);

        menuItemImport.setText("Import");
        menuInputReport.add(menuItemImport);

        menuItemExport.setText("Export");
        menuInputReport.add(menuItemExport);

        menuItemSave.setText("Save");
        menuInputReport.add(menuItemSave);

        menuItemReturntoMM.setText("Return to Manager Menu");
        menuInputReport.add(menuItemReturntoMM);

        jMenuBar1.add(menuInputReport);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1221, 547));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            input = new Input();
            input.setLineItemID(Integer.valueOf(txtLineItemID.getText()));
            input.setVendorName(txtVendorName.getText());
            input.setVendorCategory(txtVendorCategory.getText());
            input.setInput(txtInputName.getText());
            input.setCost(Double.valueOf(txtUnitCost.getText()));
            input.setQuantity(Integer.valueOf(txtQuantity.getText()));
            input.setDiscount(Double.valueOf(txtDiscount.getText()));
            input.setTaxRate(Double.valueOf(txtTaxRate.getText()));
            double grossCost = input.getGrossCost(Double.valueOf(txtUnitCost.getText()),
                    Integer.valueOf(txtQuantity.getText()));
            double discAmt = input.getDiscountAmount(
                    Double.valueOf(txtUnitCost.getText()), 
                    Integer.valueOf(txtQuantity.getText()),
                    Double.valueOf(txtDiscount.getText()));
            double taxAmt = input.getTaxAmount(Double.valueOf(txtTaxRate.getText()), 
                    Double.valueOf(txtUnitCost.getText()), 
                    Integer.valueOf(txtQuantity.getText()));
            double netCost = input.getNetCost(Double.valueOf(txtTaxRate.getText()), 
                    Double.valueOf(txtUnitCost.getText()), 
                    Integer.valueOf(txtQuantity.getText()),
                    Double.valueOf(txtDiscount.getText()));
            
            DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
            int index = tblInputReport.getSelectedRow();

            Object[] toAdd = {Integer.valueOf(txtLineItemID.getText()),
                String.valueOf(txtVendorName.getText()),
                String.valueOf(txtVendorCategory.getText()),
                String.valueOf(txtInputName.getText()),
                Double.valueOf(txtUnitCost.getText()),
                Integer.valueOf(txtQuantity.getText()),
                Double.valueOf(txtDiscount.getText()),
                Double.valueOf(txtTaxRate.getText()),
                grossCost, discAmt, taxAmt, netCost};

            txtTotalGrossCost.setText(String.format("%.2f",getTotalGrossCost(grossCost)));  
            txtTotalDiscountAmount.setText(String.format("%.2f",getTotalDiscountAmount(discAmt)));
            txtTotalTaxAmount.setText(String.format("%.2f",getTotalTaxAmount(taxAmt)));
            txtTotalNetCost.setText(String.format("%.2f",getTotalNetCost(netCost)));  
            
            inputReport.addRow(toAdd);
            
            int lineItemID = Integer.valueOf(txtLineItemID.getText());
            String vendor = txtVendorName.getText();
            String category = txtVendorCategory.getText();
            String inputx = txtInputName.getText();
            double unitCost = Double.valueOf(txtUnitCost.getText());
            int quantity = Integer.valueOf(txtQuantity.getText());
            double discount = Double.valueOf(txtDiscount.getText());
            double tax = Double.valueOf(txtTaxRate.getText());
            double gc = Double.valueOf(txtTotalGrossCost.getText());
            double da = Double.valueOf(txtTotalDiscountAmount.getText());
            double ta = Double.valueOf(txtTotalTaxAmount.getText());
            double nc = Double.valueOf(txtTotalNetCost.getText());
            
            addInput(lineItemID, vendor, category, inputx,
            unitCost, quantity, discount, tax);
            
            txtLineItemID.setText("");
            txtVendorName.setText("");
            txtVendorCategory.setText("");
            txtInputName.setText("");
            txtUnitCost.setText("");
            txtQuantity.setText("");
            txtDiscount.setText("");
            txtTaxRate.setText("");
            updateCSVInput();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "At least one of your entries has an error");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblInputReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInputReportMouseClicked
        DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
        int index = tblInputReport.getSelectedRow();
        if (tblInputReport.getSelectionModel().isSelectedIndex(index))
        {
            txtLineItemID.setEditable(false);
            txtLineItemID.setBackground(Color.YELLOW);
            btnAdd.setEnabled(false);
            txtLineItemID.setText(inputReport.getValueAt(index, 0).toString());
            txtVendorName.setText(inputReport.getValueAt(index, 1).toString());
            txtVendorCategory.setText(inputReport.getValueAt(index, 2).toString());
            txtInputName.setText(inputReport.getValueAt(index, 3).toString());
            txtUnitCost.setText(inputReport.getValueAt(index, 4).toString());
            txtQuantity.setText(inputReport.getValueAt(index, 5).toString());
            txtDiscount.setText(inputReport.getValueAt(index, 6).toString());
            txtTaxRate.setText(inputReport.getValueAt(index, 7).toString());
        }
        else 
        {
            tblInputReport.getSelectionModel().clearSelection();
            txtLineItemID.setEditable(true);
            txtLineItemID.setBackground(Color.GREEN);
            btnAdd.setEnabled(true);
            txtLineItemID.setText("");
            txtVendorName.setText("");
            txtVendorCategory.setText("");
            txtInputName.setText("");
            txtUnitCost.setText("");
            txtQuantity.setText("");
            txtDiscount.setText("");
            txtTaxRate.setText("");
        }
    }//GEN-LAST:event_tblInputReportMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        input = new Input();
        
        int yesOrNo = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this line item?", "Update Line Item",
                JOptionPane.YES_NO_OPTION);
        if (yesOrNo == 0) 
        {
            DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
            int index = tblInputReport.getSelectedRow();
            int lineItemID = Integer.valueOf(txtLineItemID.getText());
            inputReport.removeRow(index);
            removeInput(lineItemID);

            JOptionPane.showMessageDialog(this, "Successfully Deleted Line Item");

            input.setLineItemID(Integer.valueOf(txtLineItemID.getText()));
            input.setVendorName(txtVendorName.getText());
            input.setVendorCategory(txtVendorCategory.getText());
            input.setInput(txtInputName.getText());
            input.setCost(Double.valueOf(txtUnitCost.getText()));
            input.setQuantity(Integer.valueOf(txtQuantity.getText()));
            input.setDiscount(Double.valueOf(txtDiscount.getText()));
            input.setTaxRate(Double.valueOf(txtTaxRate.getText()));
            double grossCost = input.getGrossCost(Double.valueOf(txtUnitCost.getText()),
                    Integer.valueOf(txtQuantity.getText()));
            double discAmt = input.getDiscountAmount(
                    Double.valueOf(txtUnitCost.getText()),
                    Integer.valueOf(txtQuantity.getText()),
                    Double.valueOf(txtDiscount.getText()));
            double taxAmt = input.getTaxAmount(Double.valueOf(txtTaxRate.getText()),
                    Double.valueOf(txtUnitCost.getText()),
                    Integer.valueOf(txtQuantity.getText()));
            double netCost = input.getNetCost(Double.valueOf(txtTaxRate.getText()),
                    Double.valueOf(txtUnitCost.getText()),
                    Integer.valueOf(txtQuantity.getText()),
                    Double.valueOf(txtDiscount.getText()));

            txtTotalGrossCost.setText(String.format("%.2f", getTotalGrossCost(grossCost)));
            txtTotalDiscountAmount.setText(String.format("%.2f", getTotalDiscountAmount(discAmt)));
            txtTotalTaxAmount.setText(String.format("%.2f", getTotalTaxAmount(taxAmt)));
            txtTotalNetCost.setText(String.format("%.2f", getTotalNetCost(netCost)));
            txtTotalGrossCost.setText(String.format("%.2f", getTotalGrossCost(0.0)));

            txtLineItemID.setText("");
            txtVendorName.setText("");
            txtVendorCategory.setText("");
            txtInputName.setText("");
            txtUnitCost.setText("");
            txtQuantity.setText("");
            txtDiscount.setText("");
            txtTaxRate.setText("");
            updateCSVInput();
            tblInputReport.getSelectionModel().clearSelection();
            btnAdd.setEnabled(true);
            txtLineItemID.setEditable(true);
            txtLineItemID.setBackground(Color.GREEN);
        }
        else 
        {
            return;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            input = new Input();
            int yesOrNo = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to update this line item?", "Update Line Item", 
                    JOptionPane.YES_NO_OPTION);
            if (yesOrNo == 0) 
            {
                DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
                int index = tblInputReport.getSelectedRow();
                input.setLineItemID(Integer.valueOf(txtLineItemID.getText()));
                input.setVendorName(txtVendorName.getText());
                input.setVendorCategory(txtVendorCategory.getText());
                input.setInput(txtInputName.getText());
                input.setCost(Double.valueOf(txtUnitCost.getText()));
                input.setQuantity(Integer.valueOf(txtQuantity.getText()));
                input.setDiscount(Double.valueOf(txtDiscount.getText()));
                input.setTaxRate(Double.valueOf(txtTaxRate.getText()));
                double grossCost = input.getGrossCost(Double.valueOf(txtUnitCost.getText()),
                        Integer.valueOf(txtQuantity.getText()));
                double discAmt = input.getDiscountAmount(
                        Double.valueOf(txtUnitCost.getText()),
                        Integer.valueOf(txtQuantity.getText()),
                        Double.valueOf(txtDiscount.getText()));
                double taxAmt = input.getTaxAmount(Double.valueOf(txtTaxRate.getText()),
                        Double.valueOf(txtUnitCost.getText()),
                        Integer.valueOf(txtQuantity.getText()));
                double netCost = input.getNetCost(Double.valueOf(txtTaxRate.getText()),
                        Double.valueOf(txtUnitCost.getText()),
                        Integer.valueOf(txtQuantity.getText()),
                        Double.valueOf(txtDiscount.getText()));

                tblInputReport.setValueAt(Integer.valueOf(txtLineItemID.getText()), index, 0);
                tblInputReport.setValueAt(txtVendorName.getText(), index, 1);
                tblInputReport.setValueAt(txtVendorCategory.getText(), index, 2);
                tblInputReport.setValueAt(txtInputName.getText(), index, 3);
                tblInputReport.setValueAt(Double.valueOf(txtUnitCost.getText()), index, 4);
                tblInputReport.setValueAt(Integer.valueOf(txtQuantity.getText()), index, 5);
                tblInputReport.setValueAt(Double.valueOf(txtDiscount.getText()), index, 6);
                tblInputReport.setValueAt(Double.valueOf(txtTaxRate.getText()), index, 7);
                tblInputReport.setValueAt((grossCost), index, 8);
                tblInputReport.setValueAt((discAmt), index, 9);
                tblInputReport.setValueAt((taxAmt), index, 10);
                tblInputReport.setValueAt((netCost), index, 11);

                txtTotalGrossCost.setText(String.format("%.2f", getTotalGrossCost(tblInputReport.getSelectedRow())));
                txtTotalDiscountAmount.setText(String.format("%.2f", getTotalDiscountAmount(tblInputReport.getSelectedRow())));
                txtTotalTaxAmount.setText(String.format("%.2f", getTotalTaxAmount(tblInputReport.getSelectedRow())));
                txtTotalNetCost.setText(String.format("%.2f", getTotalNetCost(tblInputReport.getSelectedRow())));

                int lineItemID = Integer.valueOf(txtLineItemID.getText());
                String vendor = txtVendorName.getText();
                String category = txtVendorCategory.getText();
                String inputx = txtInputName.getText();
                double unitCost = Double.valueOf(txtUnitCost.getText());
                int quantity = Integer.valueOf(txtQuantity.getText());
                double discount = Double.valueOf(txtDiscount.getText());
                double tax = Double.valueOf(txtTaxRate.getText());
                double gc = Double.valueOf(txtTotalGrossCost.getText());
                double da = Double.valueOf(txtTotalDiscountAmount.getText());
                double ta = Double.valueOf(txtTotalTaxAmount.getText());
                double nc = Double.valueOf(txtTotalNetCost.getText());

                addInput(lineItemID, vendor, category, inputx,
                        unitCost, quantity, discount, tax);

                updateCSVInput();

                JOptionPane.showMessageDialog(this, "Successfully Updated Line Item");
            }
            else 
            {
                return;
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "At least one of your entries has an error");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtLineItemIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLineItemIDKeyPressed
        int key = evt.getKeyCode();;
         DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
        int index = tblInputReport.getSelectedRow();
        if ((key >= evt.VK_0 && key <= evt.VK_9)
                || (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9)
                || (key == KeyEvent.VK_BACK_SPACE))
        {
            txtLineItemID.setEditable(true);
            txtLineItemID.setBackground(Color.GREEN);
        }
        else 
        {
            txtLineItemID.setEditable(false);
            txtLineItemID.setBackground(Color.RED);
        }

        if (tblInputReport.isRowSelected(index))
        {
            txtLineItemID.setEditable(false);
            txtLineItemID.setBackground(Color.YELLOW);
        }
        else
        {
            txtLineItemID.setEditable(true);
            txtLineItemID.setBackground(Color.GREEN);
        }
    }//GEN-LAST:event_txtLineItemIDKeyPressed

    private void txtVendorNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVendorNameKeyPressed
        txtVendorName.setEditable(true);
        txtVendorName.setBackground(Color.GREEN);
    }//GEN-LAST:event_txtVendorNameKeyPressed

    private void txtVendorCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVendorCategoryKeyPressed
        txtVendorCategory.setEditable(true);
        txtVendorCategory.setBackground(Color.GREEN);
    }//GEN-LAST:event_txtVendorCategoryKeyPressed

    private void txtInputNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputNameKeyPressed
        txtInputName.setEditable(true);
        txtInputName.setBackground(Color.GREEN);
    }//GEN-LAST:event_txtInputNameKeyPressed

    private void txtUnitCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitCostKeyPressed
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || 
                (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9)
                || (key == KeyEvent.VK_BACK_SPACE)
                || (key == KeyEvent.VK_PERIOD))
        {
            txtUnitCost.setEditable(true);
            txtUnitCost.setBackground(Color.GREEN);
        }
        else
        {
            txtUnitCost.setEditable(false);
            txtUnitCost.setBackground(Color.RED);
        }
    }//GEN-LAST:event_txtUnitCostKeyPressed

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || 
                (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9)
                || (key == KeyEvent.VK_BACK_SPACE))
        {
            txtQuantity.setEditable(true);
            txtQuantity.setBackground(Color.GREEN);
        }
        else
        {
            txtQuantity.setEditable(false);
            txtQuantity.setBackground(Color.RED);
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || 
                (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9) || 
                (key == KeyEvent.VK_BACK_SPACE) ||
                (key == KeyEvent.VK_PERIOD))
        {
            txtDiscount.setEditable(true);
            txtDiscount.setBackground(Color.GREEN);
        }
        else
        {
            txtDiscount.setEditable(false);
            txtDiscount.setBackground(Color.RED);
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void txtTaxRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTaxRateKeyPressed
        int key = evt.getKeyCode();
        if ((key >= evt.VK_0 && key <= evt.VK_9) || 
                (key >= evt.VK_NUMPAD0 && key <= evt.VK_NUMPAD9)
                || (key == KeyEvent.VK_BACK_SPACE)
                || (key == KeyEvent.VK_PERIOD))
        {
            txtTaxRate.setEditable(true);
            txtTaxRate.setBackground(Color.GREEN);
        }
        else
        {
            txtTaxRate.setEditable(false);
            txtTaxRate.setBackground(Color.RED);
        }
    }//GEN-LAST:event_txtTaxRateKeyPressed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtLineItemID.setText("");
        txtVendorName.setText("");
        txtVendorCategory.setText("");
        txtInputName.setText("");
        txtUnitCost.setText("");
        txtQuantity.setText("");
        txtDiscount.setText("");
        txtTaxRate.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String query = txtSearch.getText();
        filter(query);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtLineItemIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLineItemIDKeyReleased
        DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
        int index = tblInputReport.getSelectedRow();
        if (tblInputReport.isRowSelected(index))
        {
            txtLineItemID.setEditable(false);
            txtLineItemID.setBackground(Color.YELLOW);
        }
        else
        {
            txtLineItemID.setEditable(true);
            txtLineItemID.setBackground(Color.GREEN);
        }
    }//GEN-LAST:event_txtLineItemIDKeyReleased

    private void btnUpdateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnUpdateStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateStateChanged

    private void filter(String query) {
        
        DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(inputReport);
        tblInputReport.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
        
    }
    
    public double getTotalGrossCost(double grossCost) {
        
        double sum = grossCost;
        for (int i = 0; i < tblInputReport.getRowCount(); i++) 
        {
            sum += (double) tblInputReport.getValueAt(i, 8);
        }
        
        return sum;
        
    }
    
    public double getTotalDiscountAmount(double discAmt) {
        
        double sum = discAmt;
        for (int i = 0; i < tblInputReport.getRowCount(); i++) 
        {
            sum += (double) tblInputReport.getValueAt(i, 9);
        }
        
        return sum;
        
    }
    
    public double getTotalTaxAmount(double taxAmt) {
        
        double sum = taxAmt;
        for (int i = 0; i < tblInputReport.getRowCount(); i++) 
        {
            sum += (double) tblInputReport.getValueAt(i, 10);
        }
        
        return sum;
        
    }
    
    public double getTotalNetCost(double netCost) {
        
        double sum = netCost;
        for (int i = 0; i < tblInputReport.getRowCount(); i++) 
        {
            sum += (double) tblInputReport.getValueAt(i, 11);
        }
        
        return sum;
        
    }
    
    private void addInput(int lineItemID, String vendorName, String vendorCategory, String input,
            double cost, int quantity, double discount, double taxRate) {
        
        Input newInput = new Input(lineItemID, vendorName, vendorCategory, input, 
                cost, quantity, discount, taxRate);
        inputList.addInput(newInput);
        
        //System.out.println(inputList.getInput(lineItemID));
        
    }
    
    private void removeInput(int lineItemID) {
        
        inputList.removeInput(lineItemID);

    }
    
    private void readCSVInput() {
        try
        {
            DefaultTableModel inputReport = (DefaultTableModel) tblInputReport.getModel();
            File file = new File(filename);
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            
            String line = "";
            String[] tempArr;
            HashMap<Integer, Input> inputs = inputList.getInputs();
            while ((line = br.readLine()) != null)
            {
                tempArr = line.split(delimiter);
                for (Object field : tempArr)
                {
                    //System.out.println(field + " ");
                }
                
                int lineItemID = Integer.valueOf(tempArr[0].trim());
                String vendor = tempArr[1].trim();
                String category = tempArr[2].trim();
                String inputx = tempArr[3].trim();
                double unitCost = Double.valueOf(tempArr[4].trim());
                int quantity = Integer.valueOf(tempArr[5].trim());
                double discount = Double.valueOf(tempArr[6].trim());
                double tax = Double.valueOf(tempArr[7].trim());
                double gc = Double.valueOf(tempArr[8].trim());
                double da = Double.valueOf(tempArr[9].trim());
                double ta = Double.valueOf(tempArr[10].trim());
                double nc = Double.valueOf(tempArr[11].trim());
                
                inputReport.addRow(new Object[]{lineItemID, vendor, category, 
                    inputx, unitCost, quantity, discount, 
                    tax, gc, da, ta, nc});
                
                txtTotalGrossCost.setText(String.format("%.2f",getTotalGrossCost(tblInputReport.getSelectedRow())));
                txtTotalDiscountAmount.setText(String.format("%.2f",getTotalDiscountAmount(tblInputReport.getSelectedRow())));
                txtTotalTaxAmount.setText(String.format("%.2f",getTotalTaxAmount(tblInputReport.getSelectedRow())));
                txtTotalNetCost.setText(String.format("%.2f",getTotalNetCost(tblInputReport.getSelectedRow())));
                
                addInput(lineItemID, vendor, category, inputx, unitCost, quantity, discount, tax);
                
                //System.out.println();
            }
            br.close();
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(this, "Error reading the file");
        }
    }
    
    private void updateCSVInput() {
        try
        {
            
            // Make a copy of the original file
            
//            File oldFile = new File(filename);
//            File new_file = new File(filename + ".csv");
//            
//            Files.copy(oldFile.toPath(), new_file.toPath());
            
            File file = new File(filename);
            BufferedWriter bf = new BufferedWriter(new FileWriter(file));

            // Traverese the map of customers and ovewrite the file.
            HashMap<Integer, Input> inputs = inputList.getInputs();
            for (Map.Entry inp : inputs.entrySet())
            {
                String row = "";
                int lineItemID = (Integer) inp.getKey();
                Input i = inputList.getInput(lineItemID);

                String vendor = i.getVendorName();
                String category = i.getVendorCategory();
                String inputx = i.getInput();
                double unitCost = i.getCost();
                int quantity = i.getQuantity();
                double discount = i.getDiscount();
                double tax = i.getTaxRate();
                double gc = i.getGrossCost(unitCost, quantity);
                double da = i.getDiscountAmount(unitCost, quantity, discount);
                double ta = i.getTaxAmount(tax, unitCost, quantity);
                double nc = i.getNetCost(tax, unitCost, quantity, discount);

                row = String.valueOf(lineItemID) + "," + vendor + "," + 
                        category + "," + inputx + "," + String.format("%.2f",unitCost)
                        + "," + String.valueOf(quantity) + "," + 
                        String.format("%.2f",discount) + "," + String.format("%.2f",tax)
                        + "," + String.format("%.2f",gc) + "," + String.format("%.2f",da)
                        + "," + String.format("%.2f",ta) + "," + String.format("%.2f",nc) 
                        + "\n";

                System.out.println("New row: " + row);

                // Add the row to the file
                bf.write(row);
            }
            bf.close();
            
            
        }
        catch(IOException e)
        {
            JOptionPane.showMessageDialog(this, "Error writing the file");
        }
        
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblInputName;
    private javax.swing.JLabel lblLineItemID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTaxRate;
    private javax.swing.JLabel lblTotalDiscountAmount;
    private javax.swing.JLabel lblTotalGrossCost;
    private javax.swing.JLabel lblTotalNetCost;
    private javax.swing.JLabel lblTotalTaxAmount;
    private javax.swing.JLabel lblUnitCost;
    private javax.swing.JLabel lblVendorCategory;
    private javax.swing.JLabel lblVendorName;
    private javax.swing.JMenu menuInputReport;
    private javax.swing.JMenuItem menuItemAdd;
    private javax.swing.JMenuItem menuItemDelete;
    private javax.swing.JMenuItem menuItemExport;
    private javax.swing.JMenuItem menuItemImport;
    private javax.swing.JMenuItem menuItemReturntoMM;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemUpdate;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JScrollPane scrlpneInputReport;
    private javax.swing.JTable tblInputReport;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtInputName;
    private javax.swing.JTextField txtLineItemID;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTaxRate;
    private javax.swing.JTextField txtTotalDiscountAmount;
    private javax.swing.JTextField txtTotalGrossCost;
    private javax.swing.JTextField txtTotalNetCost;
    private javax.swing.JTextField txtTotalTaxAmount;
    private javax.swing.JTextField txtUnitCost;
    private javax.swing.JTextField txtVendorCategory;
    private javax.swing.JTextField txtVendorName;
    // End of variables declaration//GEN-END:variables
}
